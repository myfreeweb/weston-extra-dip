<?xml version="1.0" encoding="UTF-8"?>
<protocol name="wldip_compositor_manager">

  <interface name="wldip_compositor_manager" version="1">
    <description summary="privileged protocol for managing Weston compositor internals">
      This protocol allows external privileged applications to get dumps of the important bits
      of the compositor state (as file descriptors to flatbuffer serializations), both
      on demand and as notifications for events,
      and to tell the compositor to change some bits of the state.
    </description>

    <enum name="topic" bitfield="true">
      <entry name="surfaces" value="1" summary="notify on surface events"/>
      <entry name="outputs" value="2" summary="notify on output and head events"/>
      <entry name="inputdevs" value="4" summary="notify on input device and seat events"/>
    </enum>

    <request name="subscribe">
      <description summary="subscribe to updates">
        Requests the compositor to send update events when there's any event that
        corresponds to one of the topics selected via the topics bitfield.

        There is no way to unsubscribe currently, as the intended users of the protocol
        are simple daemons that synchronize the state a settings store like dconf,
        panels that always need to know current surfaces, etc.
      </description>
      <arg name="topics" type="uint" enum="topic"/>
    </request>

    <request name="get">
      <description summary="request one update">
        Requests one update event from the compositor.
      </description>
    </request>

    <event name="update">
      <arg name="state" type="fd" summary="descriptor to a wlst format file"/>
    </event>

    <request name="desktop_surface_activate">
      <arg name="surface_uid" type="uint" summary="uid of surface"/>
    </request>

    <request name="output_set_scale">
      <arg name="output_id" type="uint" summary="id of the output"/>
      <arg name="scale" type="fixed" summary="desired scale"/>
    </request>

    <request name="device_set_tap_click">
      <arg name="seat_idx" type="uint" summary="index of the seat"/>
      <arg name="device_idx" type="uint" summary="index of the input device"/>
      <arg name="enable" type="uint" summary="desired state of tap-to-click (bool)"/>
    </request>

    <request name="device_set_tap_drag">
      <arg name="seat_idx" type="uint" summary="index of the seat"/>
      <arg name="device_idx" type="uint" summary="index of the input device"/>
      <arg name="enable" type="uint" summary="desired state of tap-drag (bool)"/>
    </request>

    <request name="device_set_drag_lock">
      <arg name="seat_idx" type="uint" summary="index of the seat"/>
      <arg name="device_idx" type="uint" summary="index of the input device"/>
      <arg name="enable" type="uint" summary="desired state of drag-lock (bool)"/>
    </request>

    <request name="device_set_send_events_mode">
      <arg name="seat_idx" type="uint" summary="index of the seat"/>
      <arg name="device_idx" type="uint" summary="index of the input device"/>
      <arg name="enable" type="uint" summary="desired send events mode (schema: SendEventsMode)"/>
    </request>

    <request name="device_set_accel_speed">
      <arg name="seat_idx" type="uint" summary="index of the seat"/>
      <arg name="device_idx" type="uint" summary="index of the input device"/>
      <arg name="enable" type="fixed" summary="desired acceleration speed"/>
    </request>

    <request name="device_set_accel_profile">
      <arg name="seat_idx" type="uint" summary="index of the seat"/>
      <arg name="device_idx" type="uint" summary="index of the input device"/>
      <arg name="enable" type="uint" summary="desired acceleration profile (schema: AccelerationProfile)"/>
    </request>

    <request name="device_set_natural_scrolling">
      <arg name="seat_idx" type="uint" summary="index of the seat"/>
      <arg name="device_idx" type="uint" summary="index of the input device"/>
      <arg name="enable" type="uint" summary="desired state of natural scrolling (bool)"/>
    </request>

    <request name="device_set_left_handed_mode">
      <arg name="seat_idx" type="uint" summary="index of the seat"/>
      <arg name="device_idx" type="uint" summary="index of the input device"/>
      <arg name="enable" type="uint" summary="desired state of left-handed mode (bool)"/>
    </request>

    <request name="device_set_click_method">
      <arg name="seat_idx" type="uint" summary="index of the seat"/>
      <arg name="device_idx" type="uint" summary="index of the input device"/>
      <arg name="enable" type="uint" summary="desired click method (schema: ClickMethod)"/>
    </request>

    <request name="device_set_scroll_method">
      <arg name="seat_idx" type="uint" summary="index of the seat"/>
      <arg name="device_idx" type="uint" summary="index of the input device"/>
      <arg name="enable" type="uint" summary="desired scroll method (schema: ScrollMethod)"/>
    </request>

    <request name="device_set_middle_emulation">
      <arg name="seat_idx" type="uint" summary="index of the seat"/>
      <arg name="device_idx" type="uint" summary="index of the input device"/>
      <arg name="enable" type="uint" summary="desired state of middle click emulation mode (bool)"/>
    </request>

    <request name="device_set_dwt">
      <arg name="seat_idx" type="uint" summary="index of the seat"/>
      <arg name="device_idx" type="uint" summary="index of the input device"/>
      <arg name="enable" type="uint" summary="desired state of disable-while-typing (bool)"/>
    </request>

  </interface>

</protocol>
